@*@using System.Globalization
@using Marketplace.Entities;
@using Marketplace.Dependencies;

@if (IsPost)
{
    var updatingBuyeruserId = Request["UpdatingBuyerID"]; //ВОЗМОЖНО МОЖНО БУДЕТ УДАЛИТЬ
    var updatingBuyerName = Request["UpdatingBuyerName"];
    var updatingBuyerSurname = Request["UpdatingBuyerSurname"];
    var updatingDoB = Request["UpdatingBuyerDoB"];
    var updatingBuyerEmail = Request["UpdatingBuyerEmail"];

    //var updatingUserDoB = Request["UpdatingUserDoB"];
    int buyerId;
    DateTime dob;
    DateTime minDate = new DateTime(1753, 1, 1, 0, 0, 0);
    DateTime maxDate = new DateTime(9999, 12, 31, 0, 0, 0);

    string dobFormat = "dd.MM.yyyy";

    DateTime.TryParseExact(updatingDoB, dobFormat, CultureInfo.InvariantCulture, DateTimeStyles.None, out dob);

    //от 1/1/1753 12:00:00 AM и 12/31/9999 11:59:59
    if (!DateTime.TryParseExact(updatingDoB, dobFormat, CultureInfo.InvariantCulture, DateTimeStyles.None, out dob) ||
        (dob <= minDate) || (dob >= maxDate)) //TODO ограничение по дате
    {
        <div class="alert alert-danger" role="alert">
            Неверный формат даты
        </div>
        return;
    }

    //DateTime.TryParseExact

    //if (int.TryParse(updatingBuyeruserId, out buyerId) && !string.IsNullOrWhiteSpace(updatingBuyerName)
    //    //&& DateTime.TryParseExact(updatingUserDoB, dobFormat, CultureInfo.InvariantCulture, DateTimeStyles.None, out dob)
    //    )
    {

        DependencyResolver.Instance.BuyresLogic.EditBuyerData(HttpContext.Current.User.Identity.Name, updatingBuyerName, updatingBuyerSurname, dob, updatingBuyerEmail);

        Response.Redirect("~/Pages/Buyers/PersonalAccountPage");
        return;
    }
}*@